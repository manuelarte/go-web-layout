// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package rest

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for HealthStatus.
const (
	DOWN HealthStatus = "DOWN"
	UP   HealthStatus = "UP"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Code The resulting http code
	Code    int         `json:"code"`
	Details interface{} `json:"details"`

	// Message Description of the error occurred
	Message string `json:"message"`
}

// Health Health checks about the status of the app
type Health struct {
	Components map[string]HealthComponent `json:"components"`

	// Status Status of the health check
	Status HealthStatus `json:"status"`
}

// HealthComponent Information about the health check
type HealthComponent struct {
	Details interface{} `json:"details,omitempty"`

	// Status Status of the health check
	Status HealthStatus `json:"status"`
}

// HealthStatus Status of the health check
type HealthStatus string

// Info Info about the version deployed
type Info struct {
	App InfoApp `json:"app"`
	Git InfoGit `json:"git"`
}

// InfoApp defines model for InfoApp.
type InfoApp struct {
	// Description Description of the app
	Description string `json:"description"`

	// Name Name of the app
	Name string `json:"name"`

	// Version Version of the app
	Version string `json:"version"`
}

// InfoGit defines model for InfoGit.
type InfoGit struct {
	// Branch Branch the app was built from
	Branch string `json:"branch"`

	// BuildTime Build time of the version deployed
	BuildTime string `json:"buildTime"`

	// BuildUrl The pipeline url that built this version
	BuildUrl string `json:"buildUrl"`

	// CommitId Commit id of the version deployed
	CommitId string `json:"commitId"`
}

// Page defines model for Page.
type Page struct {
	// Number Current page number
	Number int `json:"number"`

	// Size Size of the page
	Size int `json:"size"`

	// TotalElements Total number of elements in the page
	TotalElements int64 `json:"totalElements"`

	// TotalPages Total number of pages
	TotalPages int `json:"totalPages"`
}

// PageUsers defines model for PageUsers.
type PageUsers struct {
	Data []User `json:"data"`
	Page Page   `json:"page"`
}

// User defines model for User.
type User struct {
	// CreatedAt Creation date of the user
	CreatedAt time.Time `json:"createdAt"`

	// Id Id of the user
	Id openapi_types.UUID `json:"id"`

	// UpdatedAt Last update date of the user
	UpdatedAt time.Time `json:"updatedAt"`

	// Username Username of the user
	Username string `json:"username"`
}

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Size Page size
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Actuators
	// (GET /actuators/health)
	ActuatorsHealth(w http.ResponseWriter, r *http.Request)
	// Actuators
	// (GET /actuators/info)
	ActuatorsInfo(w http.ResponseWriter, r *http.Request)
	// Users
	// (GET /api/v1/users)
	GetUsers(w http.ResponseWriter, r *http.Request, params GetUsersParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Actuators
// (GET /actuators/health)
func (_ Unimplemented) ActuatorsHealth(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Actuators
// (GET /actuators/info)
func (_ Unimplemented) ActuatorsInfo(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Users
// (GET /api/v1/users)
func (_ Unimplemented) GetUsers(w http.ResponseWriter, r *http.Request, params GetUsersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ActuatorsHealth operation middleware
func (siw *ServerInterfaceWrapper) ActuatorsHealth(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ActuatorsHealth(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ActuatorsInfo operation middleware
func (siw *ServerInterfaceWrapper) ActuatorsInfo(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ActuatorsInfo(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", r.URL.Query(), &params.Size)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "size", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsers(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/actuators/health", wrapper.ActuatorsHealth)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/actuators/info", wrapper.ActuatorsInfo)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/users", wrapper.GetUsers)
	})

	return r
}

type ActuatorsHealthRequestObject struct {
}

type ActuatorsHealthResponseObject interface {
	VisitActuatorsHealthResponse(w http.ResponseWriter) error
}

type ActuatorsHealth200JSONResponse Health

func (response ActuatorsHealth200JSONResponse) VisitActuatorsHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ActuatorsInfoRequestObject struct {
}

type ActuatorsInfoResponseObject interface {
	VisitActuatorsInfoResponse(w http.ResponseWriter) error
}

type ActuatorsInfo200JSONResponse Info

func (response ActuatorsInfo200JSONResponse) VisitActuatorsInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersRequestObject struct {
	Params GetUsersParams
}

type GetUsersResponseObject interface {
	VisitGetUsersResponse(w http.ResponseWriter) error
}

type GetUsers200JSONResponse PageUsers

func (response GetUsers200JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsers400JSONResponse ErrorResponse

func (response GetUsers400JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Actuators
	// (GET /actuators/health)
	ActuatorsHealth(ctx context.Context, request ActuatorsHealthRequestObject) (ActuatorsHealthResponseObject, error)
	// Actuators
	// (GET /actuators/info)
	ActuatorsInfo(ctx context.Context, request ActuatorsInfoRequestObject) (ActuatorsInfoResponseObject, error)
	// Users
	// (GET /api/v1/users)
	GetUsers(ctx context.Context, request GetUsersRequestObject) (GetUsersResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ActuatorsHealth operation middleware
func (sh *strictHandler) ActuatorsHealth(w http.ResponseWriter, r *http.Request) {
	var request ActuatorsHealthRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ActuatorsHealth(ctx, request.(ActuatorsHealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ActuatorsHealth")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ActuatorsHealthResponseObject); ok {
		if err := validResponse.VisitActuatorsHealthResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ActuatorsInfo operation middleware
func (sh *strictHandler) ActuatorsInfo(w http.ResponseWriter, r *http.Request) {
	var request ActuatorsInfoRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ActuatorsInfo(ctx, request.(ActuatorsInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ActuatorsInfo")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ActuatorsInfoResponseObject); ok {
		if err := validResponse.VisitActuatorsInfoResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUsers operation middleware
func (sh *strictHandler) GetUsers(w http.ResponseWriter, r *http.Request, params GetUsersParams) {
	var request GetUsersRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsers(ctx, request.(GetUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUsersResponseObject); ok {
		if err := validResponse.VisitGetUsersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
